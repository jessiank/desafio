- Questões Teóricas

1. Qual​ ​o​ ​objetivo​ ​do​ ​comando​ ​​cache​ ​​em​ ​Spark ?

Esse comando replica todos os dados de um RDD para a memória, 
diminuindo o tempo de processamento pois evita acesso a disco

2. O​ ​mesmo​ ​código​ ​implementado​ ​em​ ​Spark​ ​é​ ​normalmente​ ​mais​ ​rápido​ ​que​ ​a​ ​implementação​ ​equivalente​ ​em MapReduce.​ ​Por​ ​quê? 

MapReduce necessariamente grava os dados processados no disco, 
sendo que em Spark sempre tem a opção de montar a estrutura de 
chave/valor na memória

3. Qual​ ​é​ ​a​ ​função​ ​do​ ​​SparkContext​? 

Preparar as configuracoes para o ambiente spark acessar os 
dados a serem processados no cluster, atraves de um objeto 
de sistema que recebe os parametros, tais como o nome do
arquivo de origem dos dados e o nome do master.

4. Explique​ ​com​ ​suas​ ​palavras​ ​​ ​o​ ​que​ ​é​ ​​Resilient​ ​Distributed​ ​Datasets​​ ​(RDD). 

São estruturas que utilizam regras padronizadas de montagem e 
armazenamento dos dados para leitura, possibilitando por exemplo 
divisão em partições e em diferentes hosts na infraestrutura de 
rede, de onde vem a qualificação "dados distribuídos" em inglês.

Utilizados posteriormente como fonte de informação em rotinas de 
processamento e jamais modificados, mas podendo ser replicados 
com ou sem modificação, qualidade essa que também está presente 
no nome da tecnologia - "resiliente".

5. GroupByKey​ ​​é​ ​menos​ ​eficiente​ ​que​ ​​reduceByKey​ ​​em​ ​grandes​ ​dataset.​ ​Por​ ​quê? 

Em grandes datasets, geralmente os dados ficam particionados na infraestrutura.
Sendo assim, no caso de GroupByKey, os dados sao trazidos sem qualquer tipo
de pre-processamento para serem utilizados na rotina Spark. Isso faz com
que haja um tempo a mais de transmissao dos dados pela rede devido a maior
quantidade de informacao a ser trafegada. No caso de usar ReduceByKey, os dados 
sao pre-agrupados pela infraestrutura Spark em cada particao antes de serem 
copiados para a o restante da rotina Spark, diminuindo o tempo de transmissao 
e processamento.

- Código em Scala

Explique​ ​o​ ​que​ ​o​ ​código​ ​Scala​ ​abaixo​ ​faz. 

val​​ ​​textFile​​ ​​=​​ ​​sc​.​textFile​(​"hdfs://..."​) 
val​​ ​​counts​​ ​​=​​ ​​textFile​.​flatMap​(​line​​ ​​=>​​ ​​line​.​split​(​"​ ​"​))
 ​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​.​map​(​word​​ ​​=>​​ ​​(​word​,​​ ​​1​))
 ​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​ ​​.​reduceByKey​(​_​​ ​​+​​ ​​_​) 
counts​.​saveAsTextFile​(​"hdfs://..."​) 

Primeiro, esse código transforma um arquivo armazenado em um sistema 
de arquivos HDFS (Hadoop) e converte em um RDD (textFile).

Em seguida, processa as palavras do texto, monta uma "tabela" com duas 
colunas e em seguida "reduz" essa tabela, somando os valores da segunda 
coluna para cada palavra, ou seja, contando as ocorrencias de cada uma 
delas, armazenando o resultado em um outro RDD (counts).

Finalmente, grava o RDD em um arquivo texto no HDFS.

- Dados do website da NASA

1. Número​ ​de​ ​hosts​ ​únicos. 

137979

2. O​ ​total​ ​de​ ​erros​ ​404. 

20901

3. Os​ ​5​ ​URLs​ ​que​ ​mais​ ​causaram​ ​erro​ ​404.

(lista das URLs com a respectiva quantidade de erros)

+---------------------------------------------------------+-----+
|request                                                  |count|
+---------------------------------------------------------+-----+
|GET /pub/winvn/readme.txt HTTP/1.0                       |2004 |
|GET /pub/winvn/release.txt HTTP/1.0                      |1732 |
|GET /shuttle/missions/STS-69/mission-STS-69.html HTTP/1.0|682  |
|GET /shuttle/missions/sts-68/ksc-upclose.gif HTTP/1.0    |426  |
|GET /history/apollo/a-001/a-001-patch-small.gif HTTP/1.0 |384  |
+---------------------------------------------------------+-----+

4. Quantidade​ ​de​ ​erros​ ​404​ ​por​ ​dia. 

+-----------+-----+-----+
|       date|month|count|
+-----------+-----+-----+
|01/Aug/1995|  Aug|  243|
|03/Aug/1995|  Aug|  304|
|04/Aug/1995|  Aug|  346|
|05/Aug/1995|  Aug|  236|
|06/Aug/1995|  Aug|  373|
|07/Aug/1995|  Aug|  537|
|08/Aug/1995|  Aug|  391|
|09/Aug/1995|  Aug|  279|
|10/Aug/1995|  Aug|  315|
|11/Aug/1995|  Aug|  263|
|12/Aug/1995|  Aug|  196|
|13/Aug/1995|  Aug|  216|
|14/Aug/1995|  Aug|  287|
|15/Aug/1995|  Aug|  327|
|16/Aug/1995|  Aug|  259|
|17/Aug/1995|  Aug|  271|
|18/Aug/1995|  Aug|  256|
|19/Aug/1995|  Aug|  209|
|20/Aug/1995|  Aug|  312|
|21/Aug/1995|  Aug|  305|
|22/Aug/1995|  Aug|  288|
|23/Aug/1995|  Aug|  345|
|24/Aug/1995|  Aug|  420|
|25/Aug/1995|  Aug|  415|
|26/Aug/1995|  Aug|  366|
|27/Aug/1995|  Aug|  370|
|28/Aug/1995|  Aug|  410|
|29/Aug/1995|  Aug|  420|
|30/Aug/1995|  Aug|  571|
|31/Aug/1995|  Aug|  526|
|01/Jul/1995|  Jul|  316|
|02/Jul/1995|  Jul|  291|
|03/Jul/1995|  Jul|  474|
|04/Jul/1995|  Jul|  359|
|05/Jul/1995|  Jul|  497|
|06/Jul/1995|  Jul|  640|
|07/Jul/1995|  Jul|  570|
|08/Jul/1995|  Jul|  302|
|09/Jul/1995|  Jul|  348|
|10/Jul/1995|  Jul|  398|
|11/Jul/1995|  Jul|  471|
|12/Jul/1995|  Jul|  471|
|13/Jul/1995|  Jul|  532|
|14/Jul/1995|  Jul|  413|
|15/Jul/1995|  Jul|  254|
|16/Jul/1995|  Jul|  257|
|17/Jul/1995|  Jul|  406|
|18/Jul/1995|  Jul|  465|
|19/Jul/1995|  Jul|  639|
|20/Jul/1995|  Jul|  428|
|21/Jul/1995|  Jul|  334|
|22/Jul/1995|  Jul|  192|
|23/Jul/1995|  Jul|  233|
|24/Jul/1995|  Jul|  328|
|25/Jul/1995|  Jul|  461|
|26/Jul/1995|  Jul|  336|
|27/Jul/1995|  Jul|  336|
|28/Jul/1995|  Jul|   94|
+-----------+-----+-----+

 
5. O​ ​total​ ​de​ ​bytes​ ​retornados. 

65524314915 (65,5 GB)
